1）为什么存储三个副本？而不是两个或者四个？
2）Chunk的大小为何选择64MB？这个选择主要基于哪些考虑？
3）GFS主要支持追加（append）、改写（overwrite）操作比较少。为什么这样设计？如何基于一个仅支持追加操作的文件系统构建分布式表格系统Bigtable？
4）为什么要将数据流和控制流分开？如果不分开，如何实现追加流程？
5）GFS有时会出现重复记录或者补零记录（padding），为什么？
6）租约（Lease）是什么？在GFS起什么作用？它与心跳（heartbeat）有何区别？
7）GFS追加操作过程中如果备副本（Secondary）出现故障，如何处理？如果主副本（Primary）出现故障，如何处理？
8）GFS Master需要存储哪些信息？Master数据结构如何设计？
9）假设服务一千万个文件，每个文件1GB,Master中存储的元数据大概占用多少内存？
10）Master如何实现高可用性？
11）负载的影响因素有哪些？如何计算一台机器的负载值？
12）Master新建chunk时如何选择ChunkServer？如果新机器上线，负载值特别低，如何避免其他ChunkServer同时往这台机器迁移chunk？
13）如果某台ChunkServer报废，GFS如何处理？
14）如果ChunkServer下线后过一会重新上线，GFS如何处理？
15）如何实现分布式文件系统的快照操作？
16）ChunkServer数据结构如何设计？
17）磁盘可能出现“位翻转”错误，ChunkServer如何应对？
18）ChunkServer重启后可能有一些过期的chunk,Master如何能够发现？

网页答案

http://oserror.com/distributed/gfs/

---------------------------------------------

我的疑问：
1. 针对5  重复记录， 说是 写入chuck出现故障， 所有成功的和错误的 都需要重写，那之后还需要去重吗？？
	readers 使用 checksum 来去重和去掉padding
2. checksum 如何工作 ， 如何对比 正确的和错误的 ，正确的 是从哪里获得
	17）解答
	对于读，要检查所读的所有block的checksum值
	对于写，分为append和write。对于append，不检查checksum，延迟到读的时候检查，因为append的时候，对于最后一个不完整的block计算checksum时候采用的是增量的计算，即使前面存在错误，也能在后来的读发现。对于overwrite，因为不能采用增量计算，要覆盖checksum，所以，必须要先检查只写入部分数据的checksum是否不一致，否则，数据错误会被隐藏。
	
	从解答中可以看出 正确的 sum应该是存在log或者其他备份，读是对比block的checksum，写入覆盖直接对比